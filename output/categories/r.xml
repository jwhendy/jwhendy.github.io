<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jwhendy (Posts about r)</title><link>https://jwhendy.github.io/</link><description></description><atom:link href="https://jwhendy.github.io/categories/r.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:jw.hendy@gmail.com"&gt;John Henderson&lt;/a&gt; </copyright><lastBuildDate>Sun, 29 Apr 2018 23:13:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Comparing python plotting libraries</title><link>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org0b67aa1" class="outline-2"&gt;
&lt;h2 id="org0b67aa1"&gt;introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0b67aa1"&gt;
&lt;p&gt;
As mentioned in a &lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;previous post&lt;/a&gt;, I've been trying to pick up &lt;code&gt;python&lt;/code&gt;, coming from mostly
using &lt;code&gt;R&lt;/code&gt; over the past 5-7 years for data analysis, stats, and a lot of plotting. I found
&lt;code&gt;python&lt;/code&gt;'s plotting landscape quite a bit more confusing than I expected, with tons of
options compared to the typical reigning &lt;code&gt;R&lt;/code&gt; champions: &lt;code&gt;base&lt;/code&gt;, &lt;a href="http://lattice.r-forge.r-project.org/"&gt;&lt;code&gt;lattice&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://ggplot2.org/"&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Granted, there are a ton of other R contenders as well, such as &lt;a href="https://plot.ly/r/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://ramnathv.github.io/rCharts/"&gt;&lt;code&gt;rCharts&lt;/code&gt;&lt;/a&gt;,
but the three above are the most common. I stick almost exclusively to &lt;code&gt;ggplot2&lt;/code&gt;, and
rarely find something I can't do (granted, this is typical science-y stuff, not
infographics or really complicated stuff). To educate myself, I went through and plotted a
pretty standard dataset in various ways to see how one would do it in a bunch of &lt;code&gt;python&lt;/code&gt;
libraries:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ggplot.yhathq.com/"&gt;&lt;code&gt;ggpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org/"&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/"&gt;&lt;code&gt;seaborn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/python/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/ipython-notebooks/cufflinks/"&gt;&lt;code&gt;cufflinks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://altair-viz.github.io/"&gt;&lt;code&gt;altair&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bokeh.pydata.org/en/latest/"&gt;&lt;code&gt;bokeh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygal.org/en/stable/"&gt;&lt;code&gt;pygal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/comparing-python-plotting-libraries/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</guid><pubDate>Sat, 23 Dec 2017 19:33:34 GMT</pubDate></item><item><title>Translating R to python</title><link>https://jwhendy.github.io/blog/translating-r-to-python/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-orga190b49" class="outline-2"&gt;
&lt;h2 id="orga190b49"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga190b49"&gt;
&lt;p&gt;
I've been using &lt;code&gt;R&lt;/code&gt; for at least &lt;a href="https://stackoverflow.com/questions/9057006/getting-strings-recognized-as-variable-names-in-r"&gt;5 years&lt;/a&gt;. Lately, I've been trying to pick up &lt;code&gt;python&lt;/code&gt; as
well, which is quite the learning experience! I've been through some tutorials (or pieces
of them) from &lt;a href="http://greenteapress.com/thinkpython/html/index.html"&gt;&lt;i&gt;think python&lt;/i&gt;&lt;/a&gt; and &lt;a href="https://learnpythonthehardway.org/"&gt;lpthw&lt;/a&gt;, as well as &lt;a href="https://www.coursera.org/learn/python"&gt;classes on Coursera&lt;/a&gt;. With some basics
under my belt, I started getting into &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt;, which is where things got
tricky. I can vaguely recall a time in my &lt;code&gt;R&lt;/code&gt; Padawan days when I had a sense of what I
wanted to do, but didn't know enough to even formulate the question correctly. I also find
I don't learn well by just reading docs. I want to poke and prod around, trying to wrap my
head around what I'm reading. For example, I ran across the the function &lt;code&gt;tolist()&lt;/code&gt; via
&lt;a href="https://stackoverflow.com/questions/34898159/python-pandas-series-combine-the-rows"&gt;SO&lt;/a&gt;, but have no idea how to interpret &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.tolist.html"&gt;this&lt;/a&gt; as it is:
&lt;/p&gt;

&lt;pre class="example"&gt;
Series.tolist()
  Convert Series to a nested list
&lt;/pre&gt;

&lt;p&gt;
I thought a &lt;code&gt;pd.Series&lt;/code&gt; was just like an &lt;code&gt;R&lt;/code&gt; vector; why would it be "nestable" in the
first place? What is a nested list and why do I want that? Some &lt;a href="https://stackoverflow.com/questions/23748995/pandas-dataframe-to-list"&gt;examples&lt;/a&gt; just show that it
converts from a &lt;code&gt;pd.Series&lt;/code&gt; to a list. I don't see any "nesting," but then don't know what
that is.
&lt;/p&gt;

&lt;p&gt;
In any case, the point is that instead of trying to just learn &lt;code&gt;pandas&lt;/code&gt; in some linear
way, I thought it might be more effective to simply take some &lt;code&gt;R&lt;/code&gt; code and translate it to
&lt;code&gt;python&lt;/code&gt;. I know what I want to know and the tools I would use in &lt;code&gt;R&lt;/code&gt;, so getting my brain
around how to do the same in &lt;code&gt;python&lt;/code&gt; seemed like an interesting way to learn. Whatever I
pickup will be relevant (I'm already doing these sorts of tasks), and the learning is more
targetted (I'm extracting the small % of information I need vs. trying to digest things I
likely will never use).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/translating-r-to-python/</guid><pubDate>Sun, 27 Aug 2017 20:52:28 GMT</pubDate></item></channel></rss>