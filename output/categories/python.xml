<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jwhendy (Posts about python)</title><link>https://jwhendy.github.io/</link><description></description><atom:link href="https://jwhendy.github.io/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:jw.hendy@gmail.com"&gt;John Henderson&lt;/a&gt; </copyright><lastBuildDate>Sun, 24 Dec 2017 00:03:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Comparing python plotting libraries</title><link>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-orgdeff1c1" class="outline-2"&gt;
&lt;h2 id="orgdeff1c1"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdeff1c1"&gt;
&lt;p&gt;
As mentioned in a &lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;previous post&lt;/a&gt;, I've been trying to pick up &lt;code&gt;python&lt;/code&gt;, coming from mostly
using &lt;code&gt;R&lt;/code&gt; over the past 5-7 years for data analysis, stats, and a lot of plotting. I found
&lt;code&gt;python&lt;/code&gt;'s plotting landscape quite a bit more confusing than I expected, with tons of
options compared to the typical reigning &lt;code&gt;R&lt;/code&gt; champions: &lt;code&gt;base&lt;/code&gt;, &lt;a href="http://lattice.r-forge.r-project.org/"&gt;&lt;code&gt;lattice&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://ggplot2.org/"&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Granted, there are a ton of other R contenders as well, such as &lt;a href="https://plot.ly/r/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://ramnathv.github.io/rCharts/"&gt;&lt;code&gt;rCharts&lt;/code&gt;&lt;/a&gt;,
but the three above are the most common. I stick almost exclusively to &lt;code&gt;ggplot2&lt;/code&gt;, and
rarely find something I can't do (granted, this is typical science-y stuff, not
infographics or really complicated stuff). To educate myself, I went through and plotted a
pretty standard dataset in various ways to see how one would do it in a bunch of &lt;code&gt;python&lt;/code&gt;
libraries:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ggplot.yhathq.com/"&gt;&lt;code&gt;ggpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org/"&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/"&gt;&lt;code&gt;seaborn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/python/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/ipython-notebooks/cufflinks/"&gt;&lt;code&gt;cufflinks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://altair-viz.github.io/"&gt;&lt;code&gt;altair&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bokeh.pydata.org/en/latest/"&gt;&lt;code&gt;bokeh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygal.org/en/stable/"&gt;&lt;code&gt;pygal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f41e97" class="outline-2"&gt;
&lt;h2 id="org4f41e97"&gt;The example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4f41e97"&gt;
&lt;p&gt;
I started &lt;i&gt;really&lt;/i&gt; simple. Three types of plots: a simple bar, a dot plot (basically a
bar plot, but makes Tufte proud with a higher data:ink ratio), and a scatter plot colored
by group.
&lt;/p&gt;

&lt;p&gt;
The bar chart in R:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ggplot2&lt;span class="p"&gt;)&lt;/span&gt;
data&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;)&lt;/span&gt;

df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
df&lt;span class="o"&gt;$&lt;/span&gt;car &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt;

ggplot&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; car&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; mpg&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; geom_bar&lt;span class="p"&gt;(&lt;/span&gt;stat&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"identity"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
A dot plot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ggplot&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; car&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; mpg&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; geom_point&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; expand_limits&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And lastly, we'll use a bit more data and do a colored scatter plot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
df&lt;span class="o"&gt;$&lt;/span&gt;car &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt;

ggplot&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; wt&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; mpg&lt;span class="p"&gt;,&lt;/span&gt; colour &lt;span class="o"&gt;=&lt;/span&gt; car&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; geom_point&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are our three plots:
&lt;/p&gt;


&lt;table&gt;
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/r_mtcars_bar.png"&gt;&lt;img src="https://jwhendy.github.io/img/r_mtcars_bar.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/r_mtcars_dot.png"&gt;&lt;img src="https://jwhendy.github.io/img/r_mtcars_dot.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/r_mtcars_scatter_color.png"&gt;&lt;img src="https://jwhendy.github.io/img/r_mtcars_scatter_color.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgccd97a0" class="outline-2"&gt;
&lt;h2 id="orgccd97a0"&gt;ggpy&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgccd97a0"&gt;
&lt;p&gt;
Porting &lt;code&gt;ggplot2&lt;/code&gt; to &lt;code&gt;python&lt;/code&gt; is an &lt;i&gt;amazing&lt;/i&gt; concept. The whole idea behind the grammar
of graphics is how little the code needs to change for different visualizations. We're
only changing some mappings (some aspect of the data leads to some aesthetic) and the
geometry being used.
&lt;/p&gt;

&lt;p&gt;
The above is &lt;i&gt;almost&lt;/i&gt; identical using the port for the bar chart. I dislike that the
aesthetic keyword is &lt;code&gt;weight&lt;/code&gt; and not simply &lt;code&gt;y&lt;/code&gt;. This &lt;a href="https://github.com/yhat/ggpy/issues/373"&gt;surprised someone else&lt;/a&gt;, too. It
also causes there to be no y-axis label by default; I had to manually add it in.
&lt;/p&gt;

&lt;p&gt;
I also don't love how &lt;code&gt;ggpy&lt;/code&gt; handles limits. Note the dot plot from &lt;code&gt;ggplot2&lt;/code&gt; and the
nice little padding above the highest dot. In &lt;code&gt;ggpy&lt;/code&gt;, this didn't seem to work well out of
the box. I could fix it with &lt;code&gt;scale_y_continuous&lt;/code&gt;, but why should I have to? This also
makes for requiring what I consider hokey, like:
&lt;/p&gt;

&lt;pre class="example"&gt;
... + scale_y_continuous(limits=(0, max(df['mpg'])*1.1))
&lt;/pre&gt;

&lt;p&gt;
I &lt;i&gt;could&lt;/i&gt; do that, but again, it's extra effort. In my own workflow, I find I'm often
visualizing some variables pretty similarly. I'll copy and paste code blocks and switch
out variable names. This is one more thing to need to remember, and perhaps the 1.1
multiplier wouldn't work so well if the data range was different by an order or two of
magnitude. Smart ranges should "just work" in my opinion.
&lt;/p&gt;

&lt;p&gt;
Another complaint has to do with saving out the files. I'm not showing it below, but these
were each generated with:
&lt;/p&gt;

&lt;pre class="example"&gt;
p = ggplot(...)
p.save('filename.png', width=w, height=h, dpi=300)
&lt;/pre&gt;

&lt;p&gt;
For the bar and dot, things were fine using &lt;code&gt;width=9, height=6&lt;/code&gt; (inches), but using this
for the scatter seemed not to incorporate the legend in the width. Using the same size, I
got this:
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://jwhendy.github.io/img/ggpy_mtcars_scatter_color_crunch.png" alt="ggpy_mtcars_scatter_color_crunch.png" width="600px"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
To get the legend to fit, I had to bump the size, but that makes the text labels much
smaller with respect to the plot. In &lt;code&gt;ggplot&lt;/code&gt;, I could fix this with some &lt;code&gt;theme()&lt;/code&gt; options; I didn't get far
enough to hunt the equivalent in &lt;code&gt;ggpy&lt;/code&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
from ggplot import *

ggplot(df, aes(x='car', weight='mpg')) + geom_bar(stat='identity') + scale_y_continuous('mpg')
&lt;/pre&gt;

&lt;p&gt;
For the dot plot, note the switch back to &lt;code&gt;y=&lt;/code&gt;:
&lt;/p&gt;

&lt;pre class="example"&gt;
ggplot(df, aes(x='car', y='mpg')) + geom_point() + ylim(low=0)
&lt;/pre&gt;

&lt;p&gt;
And the scatter plot:
&lt;/p&gt;

&lt;pre class="example"&gt;
ggplot(df, aes(x='wt', y='mpg', color='car')) + geom_point()
&lt;/pre&gt;

&lt;p&gt;
Here's what we get!
&lt;/p&gt;

&lt;table&gt;
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/ggpy_mtcars_bar.png"&gt;&lt;img src="https://jwhendy.github.io/img/ggpy_mtcars_bar.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/ggpy_mtcars_dot.png"&gt;&lt;img src="https://jwhendy.github.io/img/ggpy_mtcars_dot.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/ggpy_mtcars_scatter_color.png"&gt;&lt;img src="https://jwhendy.github.io/img/ggpy_mtcars_scatter_color.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org7c837de" class="outline-2"&gt;
&lt;h2 id="org7c837de"&gt;matplotlib&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7c837de"&gt;
&lt;p&gt;
From my reading, this looks like the loved and hated "bread and butter" of &lt;code&gt;python&lt;/code&gt;
plotting. I think the biggest complaint I've seen is the verbosity. I didn't experience
much of this, likely due to how simple these examples are.
&lt;/p&gt;

&lt;p&gt;
I ran into the same quirk as with &lt;code&gt;ggpy&lt;/code&gt; with respect to expanding the dot plot y-axis
limits. I could pass &lt;code&gt;ylim(0)&lt;/code&gt; to get zero included, but it would cut off the top dot. I
had to do the hokey scaling bit again.
&lt;/p&gt;

&lt;p&gt;
Lastly, the process of getting colors by groups was not awesome. I found I could sort of
&lt;a href="https://stackoverflow.com/questions/26139423/plot-different-color-for-different-categorical-levels-using-matplotlib"&gt;manually map&lt;/a&gt; each group to a color or do it the canonical way and &lt;a href="https://stackoverflow.com/questions/43967663/scatter-plot-with-legend-colored-by-group-without-multiple-calls-to-plt-scatter"&gt;loop through&lt;/a&gt; the data,
adding a layer of dots for each group. That also required some fiddling with the &lt;a href="https://matplotlib.org/users/legend_guide.html#legend-location"&gt;legend location&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The bar plot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'car'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Dot plot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'car'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For the colored scatter plot, which I had a &lt;a href="https://stackoverflow.com/questions/47956746/saving-matplotlib-subplot-axes-as-png-file"&gt;helluva time&lt;/a&gt; getting to save as a file. I
originally had to just screenshot the plot from &lt;code&gt;jupyter lab&lt;/code&gt;, but ended up getting the
answer, which was that my &lt;code&gt;plt.figure()&lt;/code&gt; (now commented) goofs with the &lt;code&gt;plt.subplots()&lt;/code&gt;
command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# plt.figure(figsize=(12, 9))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wt'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bbox_to_anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/mat_mtcars_bar.png"&gt;&lt;img src="https://jwhendy.github.io/img/mat_mtcars_bar.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/mat_mtcars_dot.png"&gt;&lt;img src="https://jwhendy.github.io/img/mat_mtcars_dot.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/mat_mtcars_scatter_color.png"&gt;&lt;img src="https://jwhendy.github.io/img/mat_mtcars_scatter_color.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd0c0a87" class="outline-2"&gt;
&lt;h2 id="orgd0c0a87"&gt;Seaborn&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd0c0a87"&gt;
&lt;p&gt;
Seaborn was pretty straightforward. Not much else to say!
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stripplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lmplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'wt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'mpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	   &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fit_reg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/sea_mtcars_bar.png"&gt;&lt;img src="https://jwhendy.github.io/img/sea_mtcars_bar.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/sea_mtcars_dot.png"&gt;&lt;img src="https://jwhendy.github.io/img/sea_mtcars_dot.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
  &lt;td&gt;
    &lt;/td&gt;&lt;tr&gt;
      &lt;a href="https://jwhendy.github.io/img/sea_mtcars_scatter_color.png"&gt;&lt;img src="https://jwhendy.github.io/img/sea_mtcars_scatter_color.png" width="30%"&gt;&lt;/a&gt;
    &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</guid><pubDate>Sat, 23 Dec 2017 19:33:34 GMT</pubDate></item><item><title>Translating R to python</title><link>https://jwhendy.github.io/blog/translating-r-to-python/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org5c88a44" class="outline-2"&gt;
&lt;h2 id="org5c88a44"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5c88a44"&gt;
&lt;p&gt;
I've been using &lt;code&gt;R&lt;/code&gt; for at least &lt;a href="https://stackoverflow.com/questions/9057006/getting-strings-recognized-as-variable-names-in-r"&gt;5 years&lt;/a&gt;. Lately, I've been trying to pick up &lt;code&gt;python&lt;/code&gt; as
well, which is quite the learning experience! I've been through some tutorials (or pieces
of them) from &lt;a href="http://greenteapress.com/thinkpython/html/index.html"&gt;&lt;i&gt;think python&lt;/i&gt;&lt;/a&gt; and &lt;a href="https://learnpythonthehardway.org/"&gt;lpthw&lt;/a&gt;, as well as &lt;a href="https://www.coursera.org/learn/python"&gt;classes on Coursera&lt;/a&gt;. With some basics
under my belt, I started getting into &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt;, which is where things got
tricky. I can vaguely recall a time in my &lt;code&gt;R&lt;/code&gt; Padawan days when I had a sense of what I
wanted to do, but didn't know enough to even formulate the question correctly. I also find
I don't learn well by just reading docs. I want to poke and prod around, trying to wrap my
head around what I'm reading. For example, I ran across the the function &lt;code&gt;tolist()&lt;/code&gt; via
&lt;a href="https://stackoverflow.com/questions/34898159/python-pandas-series-combine-the-rows"&gt;SO&lt;/a&gt;, but have no idea how to interpret &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.tolist.html"&gt;this&lt;/a&gt; as it is:
&lt;/p&gt;

&lt;pre class="example"&gt;
Series.tolist()
  Convert Series to a nested list
&lt;/pre&gt;

&lt;p&gt;
I thought a &lt;code&gt;pd.Series&lt;/code&gt; was just like an &lt;code&gt;R&lt;/code&gt; vector; why would it be "nestable" in the
first place? What is a nested list and why do I want that? Some &lt;a href="https://stackoverflow.com/questions/23748995/pandas-dataframe-to-list"&gt;examples&lt;/a&gt; just show that it
converts from a &lt;code&gt;pd.Series&lt;/code&gt; to a list. I don't see any "nesting," but then don't know what
that is.
&lt;/p&gt;

&lt;p&gt;
In any case, the point is that instead of trying to just learn &lt;code&gt;pandas&lt;/code&gt; in some linear
way, I thought it might be more effective to simply take some &lt;code&gt;R&lt;/code&gt; code and translate it to
&lt;code&gt;python&lt;/code&gt;. I know what I want to know and the tools I would use in &lt;code&gt;R&lt;/code&gt;, so getting my brain
around how to do the same in &lt;code&gt;python&lt;/code&gt; seemed like an interesting way to learn. Whatever I
pickup will be relevant (I'm already doing these sorts of tasks), and the learning is more
targetted (I'm extracting the small % of information I need vs. trying to digest things I
likely will never use).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;Read moreâ¦&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/translating-r-to-python/</guid><pubDate>Sun, 27 Aug 2017 20:52:28 GMT</pubDate></item></channel></rss>