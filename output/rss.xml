<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jwhendy</title><link>https://jwhendy.github.io/</link><description>Knowledge, sleep, food and coffee go in; this type of stuff comes out.</description><atom:link href="https://jwhendy.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:jw.hendy@gmail.com"&gt;John Henderson&lt;/a&gt; </copyright><lastBuildDate>Mon, 19 Apr 2021 19:24:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dr. Douglas Frank and the voter fraud credit line</title><link>https://jwhendy.github.io/blog/dr-douglas-frank-and-the-voter-fraud-credit-line/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org0b71992" class="outline-2"&gt;
&lt;h2 id="org0b71992"&gt;background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0b71992"&gt;
&lt;p&gt;
A voter fraud theory strikes again! I have come to rather enjoy these, as if you just take
a deep breath and remember that there was no fraud, these amount to an interesting puzzle to solve. It's
just an episode of Penn &amp;amp; Teller "Fool Us" where the goal is to figure out how the magician
does his trick. Instead of magic, we have math and data as the methods at work.
&lt;/p&gt;

&lt;p&gt;
You can find the theory of Dr. Douglas G. Frank presented in a &lt;a href="https://www.depernolaw.com/uploads/2/7/0/2/27029178/collective_response_to_motions_for_protective_order_040921.pdf"&gt;recent legal brief&lt;/a&gt; from Attorney
Matthew DePerno (attorney for the Plaintiff, William Bailey v. Antrim County). You
can also listen to him walk through the brief in an interview &lt;a href="https://rumble.com/vfjei7-interview-with-matt-deperno-on-new-explosive-evidence-submitted-in-michigan.html"&gt;on rumble&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/dr-douglas-frank-and-the-voter-fraud-credit-line/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://jwhendy.github.io/blog/dr-douglas-frank-and-the-voter-fraud-credit-line/</guid><pubDate>Fri, 16 Apr 2021 02:19:25 GMT</pubDate></item><item><title>Vote fraud theory: Hammer, Scorecard, and NY Times json files</title><link>https://jwhendy.github.io/blog/vote-fraud-theory-hammer-scorecard-and-ny-times-json-files/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org67abfbd" class="outline-2"&gt;
&lt;h2 id="org67abfbd"&gt;background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67abfbd"&gt;
&lt;p&gt;
I've been presented with another theory of fraud in the 2020 Presidential election. Have a
look at &lt;a href="https://www.youtube.com/watch?v=X1uyg1f0RNA"&gt;the video&lt;/a&gt;, which compares snapshots of the election results as extracted from NY Times &lt;code&gt;.json&lt;/code&gt;
files to "prove" that votes were switched and lost. This is done via some &lt;code&gt;python&lt;/code&gt;
code we'll take a look at below. The video walks through this &lt;a href="https://www.naturalnews.com/2020-11-11-election-data-analyzed-votes-switched-biden-software.html"&gt;Natural News post&lt;/a&gt; in a very
lively and shout-splaining fashion. Bold claims are made, including:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;NY Times &lt;code&gt;.json&lt;/code&gt; files are analogous to a "Flight Data Recorder (black box)" when it
comes to being official transaction logs of election night results&lt;/li&gt;
&lt;li&gt;over 500k votes were switched from Trump to Biden&lt;/li&gt;
&lt;li&gt;Bannon and Giuliani have confirmed whistleblowers from Dominion, a ballot counting
software company (that was on 11/11; the pattern is always the same: dangle some
mind-blowing tidbit and then we never hear about it again? Nevertheless,
for weeks I'll hear people citing "those Dominion whistleblowers they found")&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://everylegalvote.com/country"&gt;fraud simulator &lt;/a&gt; (spoiler: it just switches key states when you toggle between fraud
and no fraud scenarios, with no explanation of how it's calculating anything at all)&lt;/li&gt;
&lt;li&gt;Trump and DoD personnel watched this fraud happen in real time, have it recorded, and
&lt;i&gt;allowed&lt;/i&gt; the fraud to happen so they'd have proof (but still filed lawsuits &lt;a href="https://www.theguardian.com/us-news/2020/nov/10/donald-trump-longshot-election-lawsuits"&gt;in five
states&lt;/a&gt;, just to &lt;a href="https://www.reuters.com/article/snell-maricopa/snell-wilmer-withdraws-from-election-lawsuit-as-trump-contests-arizona-results-idUSL1N2HY005"&gt;withdraw&lt;/a&gt; from &lt;a href="https://www.theguardian.com/us-news/2020/nov/13/trump-law-firm-withdraws-pennsylvania-election-case"&gt;two&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In any case, we'll be focused on the data analysis and short answer: no, there's nothing
here folks.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/vote-fraud-theory-hammer-scorecard-and-ny-times-json-files/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://jwhendy.github.io/blog/vote-fraud-theory-hammer-scorecard-and-ny-times-json-files/</guid><pubDate>Mon, 16 Nov 2020 04:31:55 GMT</pubDate></item><item><title>Vote fraud theory: straight ticket vs. direct votes</title><link>https://jwhendy.github.io/blog/vote-fraud-theory-straight-ticket-vs-direct-votes/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org1d963a2" class="outline-2"&gt;
&lt;h2 id="org1d963a2"&gt;background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1d963a2"&gt;
&lt;p&gt;
While the 2020 election is behind us, this is not the case with interpretations. Theories
abound proposing how and why we can &lt;i&gt;know&lt;/i&gt; that fraud is the overwhelming conclusion. One
such theory is contained in &lt;a href="https://www.youtube.com/watch?v=YRJCB6U-H4E"&gt;this video&lt;/a&gt; by a &lt;a href="https://en.wikipedia.org/wiki/Shiva_Ayyadurai"&gt;Dr. Shiva&lt;/a&gt;. The gist goes like this:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;in certain states, one may vote "straight ticket," which means making one choice to
select all same-party candidates on the ballot&lt;/li&gt;
&lt;li&gt;one may also "direct vote," meaning one makes individual choices (which may or may not
be for all same-party candidates)&lt;/li&gt;
&lt;li&gt;for a given party, there is an expected correlation between the percent of straight
ticket votes in an area (e.g. precinct, county) and direct votes for others of the same
party; deviating from this correlation implies fraud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Let's take a look!
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/vote-fraud-theory-straight-ticket-vs-direct-votes/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://jwhendy.github.io/blog/vote-fraud-theory-straight-ticket-vs-direct-votes/</guid><pubDate>Sun, 15 Nov 2020 16:50:25 GMT</pubDate></item><item><title>Arch and Ubuntu side-by-side on encrypted btrfs</title><link>https://jwhendy.github.io/blog/arch-and-ubuntu-side-by-side-on-encrypted-btrfs/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org79fbf17" class="outline-2"&gt;
&lt;h2 id="org79fbf17"&gt;background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org79fbf17"&gt;
&lt;p&gt;
I've used Arch linux for about 8 years from &lt;a href="https://bbs.archlinux.org/profile.php?id=35588"&gt;what I can tell&lt;/a&gt;. I love the minimalistic
nature, and also think &lt;code&gt;pacman&lt;/code&gt; and &lt;code&gt;pacaur&lt;/code&gt; are pretty great for package management. Arch
doesn't give me stuff I don't need, stays out of my way, and has &lt;a href="https://wiki.archlinux.org/"&gt;fantastic
documentation&lt;/a&gt;. That said, at work I need Ubuntu due to some pre-built binary availability
and the lack of desire to build all of them each time they update. I decided to go with
both so I could use Ubuntu for specific tasks and Arch for my daily driver.
&lt;/p&gt;

&lt;p&gt;
I was curious if I could use &lt;code&gt;btrfs&lt;/code&gt; to create one main shared space for both, choosing
which subvolume to mount at boot. This eliminates the need to partition the disk and guess
sizes for each. I also encrypt my drives, so it required the ability to create an
encrypted container on &lt;code&gt;btrfs&lt;/code&gt; and point the bootloader to that specific container based
no which distro I was booting. Lastly, my newest company issued computer shipped with UEFI
and Secure Boot, which was entirely new to me.
&lt;/p&gt;

&lt;p&gt;
About ~15hrs later, I've got base systems installed and am feeling pretty happy.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/arch-and-ubuntu-side-by-side-on-encrypted-btrfs/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><guid>https://jwhendy.github.io/blog/arch-and-ubuntu-side-by-side-on-encrypted-btrfs/</guid><pubDate>Sat, 28 Apr 2018 14:17:26 GMT</pubDate></item><item><title>Comparing python plotting libraries</title><link>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org8e4c5b4" class="outline-2"&gt;
&lt;h2 id="org8e4c5b4"&gt;introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8e4c5b4"&gt;
&lt;p&gt;
As mentioned in a &lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;previous post&lt;/a&gt;, I've been trying to pick up &lt;code&gt;python&lt;/code&gt;, coming from mostly
using &lt;code&gt;R&lt;/code&gt; over the past 5-7 years for data analysis, stats, and a lot of plotting. I found
&lt;code&gt;python&lt;/code&gt;'s plotting landscape quite a bit more confusing than I expected, with tons of
options compared to the typical reigning &lt;code&gt;R&lt;/code&gt; champions: &lt;code&gt;base&lt;/code&gt;, &lt;a href="http://lattice.r-forge.r-project.org/"&gt;&lt;code&gt;lattice&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://ggplot2.org/"&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Granted, there are a ton of other R contenders as well, such as &lt;a href="https://plot.ly/r/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://ramnathv.github.io/rCharts/"&gt;&lt;code&gt;rCharts&lt;/code&gt;&lt;/a&gt;,
but the three above are the most common. I stick almost exclusively to &lt;code&gt;ggplot2&lt;/code&gt;, and
rarely find something I can't do (granted, this is typical science-y stuff, not
infographics or really complicated stuff). To educate myself, I went through and plotted a
pretty standard dataset in various ways to see how one would do it in a bunch of &lt;code&gt;python&lt;/code&gt;
libraries:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://ggplot.yhathq.com/"&gt;&lt;code&gt;ggpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org/"&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seaborn.pydata.org/"&gt;&lt;code&gt;seaborn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/python/"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/ipython-notebooks/cufflinks/"&gt;&lt;code&gt;cufflinks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://altair-viz.github.io/"&gt;&lt;code&gt;altair&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bokeh.pydata.org/en/latest/"&gt;&lt;code&gt;bokeh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygal.org/en/stable/"&gt;&lt;code&gt;pygal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/comparing-python-plotting-libraries/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/comparing-python-plotting-libraries/</guid><pubDate>Sat, 23 Dec 2017 19:33:34 GMT</pubDate></item><item><title>Translating R to python</title><link>https://jwhendy.github.io/blog/translating-r-to-python/</link><dc:creator>John Henderson</dc:creator><description>&lt;div id="outline-container-org5de416a" class="outline-2"&gt;
&lt;h2 id="org5de416a"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5de416a"&gt;
&lt;p&gt;
I've been using &lt;code&gt;R&lt;/code&gt; for at least &lt;a href="https://stackoverflow.com/questions/9057006/getting-strings-recognized-as-variable-names-in-r"&gt;5 years&lt;/a&gt;. Lately, I've been trying to pick up &lt;code&gt;python&lt;/code&gt; as
well, which is quite the learning experience! I've been through some tutorials (or pieces
of them) from &lt;a href="http://greenteapress.com/thinkpython/html/index.html"&gt;&lt;i&gt;think python&lt;/i&gt;&lt;/a&gt; and &lt;a href="https://learnpythonthehardway.org/"&gt;lpthw&lt;/a&gt;, as well as &lt;a href="https://www.coursera.org/learn/python"&gt;classes on Coursera&lt;/a&gt;. With some basics
under my belt, I started getting into &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt;, which is where things got
tricky. I can vaguely recall a time in my &lt;code&gt;R&lt;/code&gt; Padawan days when I had a sense of what I
wanted to do, but didn't know enough to even formulate the question correctly. I also find
I don't learn well by just reading docs. I want to poke and prod around, trying to wrap my
head around what I'm reading. For example, I ran across the the function &lt;code&gt;tolist()&lt;/code&gt; via
&lt;a href="https://stackoverflow.com/questions/34898159/python-pandas-series-combine-the-rows"&gt;SO&lt;/a&gt;, but have no idea how to interpret &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.tolist.html"&gt;this&lt;/a&gt; as it is:
&lt;/p&gt;

&lt;pre class="example"&gt;
Series.tolist()
  Convert Series to a nested list
&lt;/pre&gt;

&lt;p&gt;
I thought a &lt;code&gt;pd.Series&lt;/code&gt; was just like an &lt;code&gt;R&lt;/code&gt; vector; why would it be "nestable" in the
first place? What is a nested list and why do I want that? Some &lt;a href="https://stackoverflow.com/questions/23748995/pandas-dataframe-to-list"&gt;examples&lt;/a&gt; just show that it
converts from a &lt;code&gt;pd.Series&lt;/code&gt; to a list. I don't see any "nesting," but then don't know what
that is.
&lt;/p&gt;

&lt;p&gt;
In any case, the point is that instead of trying to just learn &lt;code&gt;pandas&lt;/code&gt; in some linear
way, I thought it might be more effective to simply take some &lt;code&gt;R&lt;/code&gt; code and translate it to
&lt;code&gt;python&lt;/code&gt;. I know what I want to know and the tools I would use in &lt;code&gt;R&lt;/code&gt;, so getting my brain
around how to do the same in &lt;code&gt;python&lt;/code&gt; seemed like an interesting way to learn. Whatever I
pickup will be relevant (I'm already doing these sorts of tasks), and the learning is more
targetted (I'm extracting the small % of information I need vs. trying to digest things I
likely will never use).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jwhendy.github.io/blog/translating-r-to-python/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>learning</category><category>python</category><category>r</category><guid>https://jwhendy.github.io/blog/translating-r-to-python/</guid><pubDate>Sun, 27 Aug 2017 20:52:28 GMT</pubDate></item><item><title>kicking off a github site with nikola</title><link>https://jwhendy.github.io/blog/2017-05-15-kick-off/</link><dc:creator>John Henderson</dc:creator><description>&lt;p&gt;
trying to see how this works
&lt;/p&gt;</description><category>first</category><category>github</category><category>nikola</category><guid>https://jwhendy.github.io/blog/2017-05-15-kick-off/</guid><pubDate>Mon, 15 May 2017 20:12:47 GMT</pubDate></item></channel></rss>